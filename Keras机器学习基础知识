#Keras机器学习基础知识
#基本分类对服装图像进行分类：

#导入数据包与类
import tensorflow as tf
from tensorflow import  keras

#导入辅助库
import numpy as np
import matplotlib.pyplot as plt

#打印tensorflow版本
print(tf.__version__)

#导入数据集
fashion_mnist = keras.datasets.fashion_mnist

#分出测试集与训练集
(train_images, train_labels),(test_images, test_labels) = fashion_mnist.load_data()

#创建类名
class_names = ['T-shirt/top','Trouser','Pullover','Dress','Coat',
         'Sandal','Shirt','Sneaker','Bag','Ankle boot']



#显示数据集大小与图片尺寸
train_images.shape

#显示数据集有多少个标签
len(train_labels)

#标签中的整数与文件类型
train_labels

#查看测试集中的文件数量与图片尺寸
test_images.shape

#测试集图像标签数量
len(test_labels)


#图像预处理数据 在训练网络之前，必须对数据进行预处理。如果您检查训练集中的第一个图像，您会看到像素值处于 0 到 255 之间：
plt.figure()
plt.imshow(train_images[0])
plt.colorbar()
plt.grid(False)
plt.show()


#将数据值缩减到0到1之间，然后导入神经网络，将训练集和测试集都进行预处理，除以255.
train_images = train_images / 255.0
test_images = test_images / 255.0

#显示训练集中的前25个图像，并在图像下方显示类名称
plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(train_images[i], cmap=plt.cm.binary)
    plt.xlabel(class_names[train_labels[i]])
plt.show()

#构建模型 构建神经网络需要先配置模型的层，然后再编译模型。

#设置层 神经网络的基本组成部分是层。层会从向其馈送的数据中提取表示形式。希望这些表示形式有助于解决手头上的问题。如 tf.keras.layers.Dense）都具有在训练期间才会学习的参数。
model = keras.Sequential([
    keras.layers.Flatten(input_shape=(28, 28)), #首先把图像从2维转化为以为
    keras.layers.Dense(128, activation='relu'), #将第一个dense设置为128个神经元
    keras.layers.Dense(10)             #第二层返回一个长度为10的logits数组。每个节点都包含一个得分，用来白哦是当前图像属于10个类中的哪一类。
])

#编译模型
'''在准备对模型进行训练之前，还需要再对其进行一些设置。以下内容是在模型的编译步骤中添加的：

损失函数 - 用于测量模型在训练期间的准确率。您会希望最小化此函数，以便将模型“引导”到正确的方向上。
优化器 - 决定模型如何根据其看到的数据和自身的损失函数进行更新。
指标 - 用于监控训练和测试步骤。以下示例使用了准确率，即被正确分类的图像的比率
'''
model.compile(optimizer='adam',
    loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
    metrics=['accuracy'])

#训练模型
'''
训练神经网络模型需要执行以下步骤：

将训练数据馈送给模型。在本例中，训练数据位于 train_images 和 train_labels 数组中。
模型学习将图像和标签关联起来。
要求模型对测试集（在本例中为 test_images 数组）进行预测。
验证预测是否与 test_labels 数组中的标签相匹配。
'''

#向模型馈送数据 要开始训练，请调用 model.fit 方法，这样命名是因为该方法会将模型与训练数据进行“拟合”：
model.fit(train_images, train_labels, epochs=10)

#评估准确率 模型在测试集上的表现
test_loss, test_acc = model.evaluate(test_images, test_labels, verbose=2)
print('\测试集效果：',test_acc)

'''
313/313 - 0s - loss: 0.3487 - accuracy: 0.8740
\测试集效果： 0.8740000128746033

结果表明，模型在测试数据集上的准确率略低于训练数据集。训练准确率和测试准确率之间的差距代表过拟合。
'''


#进行预测
'''在模型经过训练后，您可以使用它对一些图像进行预测。模型具有线性输出，即 logits。您可以附加一个 softmax 层，将 logits 转换成更容易理解的概率。'''
probability_model = tf.keras.Sequential([model,tf.keras.layers.Softmax()])

predictions = probability_model.predict(test_images)

#查看第一个预测概率
predictions[0]

#查看最大概率的标签序号
np.argmax(predictions[0])

#进行标签校验
test_labels[0]

#将预测的数据绘制成图表，看看模型对于全部10个类的预测
def plot_image(i, predictions_array, true_label, img):
  predictions_array, true_label, img = predictions_array, true_label[i], img[i]
  plt.grid(False)
  plt.xticks([])
  plt.yticks([])

  plt.imshow(img, cmap=plt.cm.binary)

  predicted_label = np.argmax(predictions_array)
  if predicted_label == true_label:
    color = 'blue'
  else:
    color = 'red'

  plt.xlabel("{} {:2.0f}% ({})".format(class_names[predicted_label],
                                100*np.max(predictions_array),
                                class_names[true_label]),
                                color=color)

def plot_value_array(i, predictions_array, true_label):
  predictions_array, true_label = predictions_array, true_label[i]
  plt.grid(False)
  plt.xticks(range(10))
  plt.yticks([])
  thisplot = plt.bar(range(10), predictions_array, color="#777777")
  plt.ylim([0, 1])
  predicted_label = np.argmax(predictions_array)

  thisplot[predicted_label].set_color('red')
  thisplot[true_label].set_color('blue')
  
i = 9
plt.figure(figsize=(6,3))
plt.subplot(1,2,1)
plot_image(i, predictions[i], test_labels, test_images)
plt.subplot(1,2,2)
plot_value_array(i, predictions[i],  test_labels)
plt.show()

#多绘制几张图
# 绘制前 X 个测试图像、它们的预测标签和真实标签。
# 正确的预测为蓝色，错误的预测为红色。
num_rows = 5
num_cols = 3
num_images = num_rows*num_cols
plt.figure(figsize=(2*2*num_cols, 2*num_rows))
for i in range(num_images):
  plt.subplot(num_rows, 2*num_cols, 2*i+1)
  plot_image(i, predictions[i], test_labels, test_images)
  plt.subplot(num_rows, 2*num_cols, 2*i+2)
  plot_value_array(i, predictions[i], test_labels)
plt.tight_layout()
plt.show()

#使用训练好的模型

#从测试数据集中抓取图像。
img = test_images[1]

print(img.shape)

# 将图像添加到批处理中，一个也要这么搞。
img = (np.expand_dims(img,0))

print(img.shape)

#预测这个图像正确标签：
predictions_single = probability_model.predict(img)
print(predictions_single)

plot_value_array(1, predictions_single[0], test_labels)
_ = plt.xticks(range(10), class_names, rotation=45)

#查看图像预测标签序列号
np.argmax(predictions_single[0])
